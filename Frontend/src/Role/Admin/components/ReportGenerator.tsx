import React, { useState } from 'react';
import { Download, FileText, Calendar, Users, Briefcase, TrendingUp, BarChart3, PieChart } from 'lucide-react';

interface ReportGeneratorProps {
  userData: any[];
  jobData: any[];
  stats: any;
  detailedStats: any;
}

const ReportGenerator: React.FC<ReportGeneratorProps> = ({ userData, jobData, stats, detailedStats }) => {
  const [generating, setGenerating] = useState(false);
  const [reportType, setReportType] = useState('comprehensive');

  const generatePDFReport = async () => {
    setGenerating(true);
    
    try {
      // Create report content based on selected type
      const reportContent = generateReportContent();
      
      // Create downloadable HTML report
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>MediConnect Analytics Report</title>
          <style>
            body { 
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
              margin: 20px; 
              line-height: 1.6;
              color: #333;
            }
            .header { 
              text-align: center; 
              border-bottom: 3px solid #2563eb; 
              padding-bottom: 20px; 
              margin-bottom: 30px;
            }
            .header h1 {
              color: #2563eb;
              margin-bottom: 10px;
            }
            .section { 
              margin: 30px 0; 
              page-break-inside: avoid;
            }
            .section h2 {
              color: #1f2937;
              border-bottom: 2px solid #e5e7eb;
              padding-bottom: 10px;
              margin-bottom: 20px;
            }
            .stats-grid { 
              display: grid; 
              grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
              gap: 20px; 
              margin: 20px 0;
            }
            .stat-card { 
              border: 1px solid #e5e7eb; 
              padding: 20px; 
              border-radius: 8px; 
              background: #f9fafb;
              box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }
            .stat-card h3 {
              color: #374151;
              margin-bottom: 10px;
              font-size: 16px;
            }
            .highlight { 
              background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%); 
              padding: 20px; 
              border-radius: 8px; 
              border-left: 4px solid #2563eb;
              margin: 20px 0;
            }
            .highlight h3 {
              color: #1e40af;
              margin-bottom: 15px;
            }
            table { 
              width: 100%; 
              border-collapse: collapse; 
              margin: 20px 0; 
              font-size: 14px;
            }
            th, td { 
              border: 1px solid #d1d5db; 
              padding: 12px 8px; 
              text-align: left; 
            }
            th { 
              background-color: #f3f4f6; 
              font-weight: 600;
              color: #374151;
            }
            tr:nth-child(even) {
              background-color: #f9fafb;
            }
            .metric {
              font-size: 24px;
              font-weight: bold;
              color: #2563eb;
            }
            .subtitle {
              color: #6b7280;
              font-size: 14px;
              margin-top: 5px;
            }
            .insights-grid {
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
              gap: 20px;
              margin: 20px 0;
            }
            .insight-card {
              background: #fef3c7;
              border: 1px solid #f59e0b;
              border-radius: 8px;
              padding: 15px;
            }
            .insight-card h4 {
              color: #92400e;
              margin-bottom: 10px;
            }
            .chart-placeholder {
              background: #f3f4f6;
              border: 2px dashed #d1d5db;
              padding: 40px;
              text-align: center;
              border-radius: 8px;
              margin: 20px 0;
            }
            .footer {
              margin-top: 40px;
              padding-top: 20px;
              border-top: 1px solid #e5e7eb;
              text-align: center;
              color: #6b7280;
              font-size: 12px;
            }
            @media print {
              body { margin: 0; }
              .section { page-break-inside: avoid; }
            }
          </style>
        </head>
        <body>
          ${reportContent}
          <div class="footer">
            <p>Generated by MediConnect Analytics Dashboard</p>
            <p>Report generated on: ${new Date().toLocaleString()}</p>
          </div>
        </body>
        </html>
      `;
      
      const blob = new Blob([htmlContent], { type: 'text/html' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `mediconnect_${reportType}_report_${new Date().toISOString().split('T')[0]}.html`;
      a.click();
      window.URL.revokeObjectURL(url);
      
    } catch (error) {
      console.error('Error generating report:', error);
    } finally {
      setGenerating(false);
    }
  };

  const generateReportContent = () => {
    const currentDate = new Date().toLocaleDateString();
    const totalActiveUsers = (detailedStats?.activeUsers?.doctors || 0) + 
                           (detailedStats?.activeUsers?.students || 0) + 
                           (detailedStats?.activeUsers?.institutes || 0) + 
                           (detailedStats?.activeUsers?.recruiters || 0);
    
    const engagementRate = stats.total > 0 ? Math.round((totalActiveUsers / stats.total) * 100) : 0;
    
    switch (reportType) {
      case 'user-analytics':
        return generateUserAnalyticsReport(currentDate, totalActiveUsers, engagementRate);
      case 'job-analytics':
        return generateJobAnalyticsReport(currentDate);
      case 'executive-summary':
        return generateExecutiveSummaryReport(currentDate, totalActiveUsers, engagementRate);
      default:
        return generateComprehensiveReport(currentDate, totalActiveUsers, engagementRate);
    }
  };

  const generateComprehensiveReport = (currentDate: string, totalActiveUsers: number, engagementRate: number) => {
    return `
      <div class="header">
        <h1>MediConnect Comprehensive Analytics Report</h1>
        <p><strong>Generated on:</strong> ${currentDate}</p>
        <p><strong>Report Type:</strong> Comprehensive Analysis</p>
      </div>
      
      <div class="section">
        <h2>Executive Summary</h2>
        <div class="highlight">
          <h3>Platform Overview</h3>
          <div class="stats-grid">
            <div class="stat-card">
              <div class="metric">${stats.total}</div>
              <div class="subtitle">Total Registered Users</div>
            </div>
            <div class="stat-card">
              <div class="metric">${stats.totalJobs || 0}</div>
              <div class="subtitle">Total Job Opportunities</div>
            </div>
            <div class="stat-card">
              <div class="metric">${totalActiveUsers}</div>
              <div class="subtitle">Active Users (30 days)</div>
            </div>
            <div class="stat-card">
              <div class="metric">${engagementRate}%</div>
              <div class="subtitle">User Engagement Rate</div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="section">
        <h2>User Analytics</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <h3>User Distribution</h3>
            <p><strong>Doctors:</strong> ${stats.doctorCount || 0}</p>
            <p><strong>Medical Students:</strong> ${stats.studentCount || 0}</p>
            <p><strong>Educational Institutes:</strong> ${stats.instituteCount || 0}</p>
            <p><strong>Recruiters:</strong> ${stats.recruiterCount || 0}</p>
          </div>
          <div class="stat-card">
            <h3>Active User Breakdown</h3>
            <p><strong>Active Doctors:</strong> ${detailedStats?.activeUsers?.doctors || 0}</p>
            <p><strong>Active Students:</strong> ${detailedStats?.activeUsers?.students || 0}</p>
            <p><strong>Active Institutes:</strong> ${detailedStats?.activeUsers?.institutes || 0}</p>
            <p><strong>Active Recruiters:</strong> ${detailedStats?.activeUsers?.recruiters || 0}</p>
          </div>
        </div>
      </div>
      
      <div class="section">
        <h2>Job Analytics</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <h3>Job Distribution</h3>
            <p><strong>Total Jobs:</strong> ${stats.totalJobs || 0}</p>
            <p><strong>Full Time:</strong> ${stats.fullTimeCount || 0}</p>
            <p><strong>Part Time:</strong> ${stats.partTimeCount || 0}</p>
            <p><strong>Internships:</strong> ${stats.internCount || 0}</p>
          </div>
          <div class="stat-card">
            <h3>Job Specialties</h3>
            <p><strong>Cardiologists:</strong> ${stats.CardiologistCount || 0}</p>
            <p><strong>Pediatricians:</strong> ${stats.PediatricianCount || 0}</p>
            <p><strong>General Physicians:</strong> ${stats.GeneralPhysicianCount || 0}</p>
            <p><strong>Other Specialties:</strong> ${(stats.totalJobs || 0) - (stats.CardiologistCount || 0) - (stats.PediatricianCount || 0) - (stats.GeneralPhysicianCount || 0)}</p>
          </div>
        </div>
      </div>
      
      <div class="section">
        <h2>Recent User Activity</h2>
        <table>
          <thead>
            <tr>
              <th>Email</th>
              <th>User Type</th>
              <th>Name</th>
              <th>Location</th>
              <th>Specialty/Field</th>
              <th>Registration Date</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            ${userData.slice(0, 15).map(user => `
              <tr>
                <td>${user.email}</td>
                <td>${formatUserType(user.userType)}</td>
                <td>${getUserName(user)}</td>
                <td>${user.location || 'N/A'}</td>
                <td>${getUserSpecialty(user)}</td>
                <td>${new Date(user.createdAt).toLocaleDateString()}</td>
                <td><span style="color: #10b981; font-weight: 600;">Active</span></td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
      
      <div class="section">
        <h2>Recent Job Postings</h2>
        <table>
          <thead>
            <tr>
              <th>Job Title</th>
              <th>Department</th>
              <th>Location</th>
              <th>Job Type</th>
              <th>Hospital</th>
              <th>Salary Range</th>
              <th>Posted Date</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            ${jobData.slice(0, 15).map(job => `
              <tr>
                <td>${job.title || 'N/A'}</td>
                <td>${job.department || 'N/A'}</td>
                <td>${job.location || 'N/A'}</td>
                <td>${formatJobType(job.jobType)}</td>
                <td>${job.hospitalName || 'N/A'}</td>
                <td>${formatSalaryRange(job.salaryRange)}</td>
                <td>${new Date(job.createdAt).toLocaleDateString()}</td>
                <td><span style="color: #10b981; font-weight: 600;">Active</span></td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
      
      <div class="section">
        <h2>Key Insights & Recommendations</h2>
        <div class="insights-grid">
          <div class="insight-card">
            <h4>User Engagement</h4>
            <p>Platform has ${stats.total} registered users with ${engagementRate}% engagement rate. Consider implementing targeted engagement campaigns.</p>
          </div>
          <div class="insight-card">
            <h4>Job Market Analysis</h4>
            <p>${stats.totalJobs || 0} job opportunities available. ${getMostPopularJobType()} positions are most in demand.</p>
          </div>
          <div class="insight-card">
            <h4>User Growth</h4>
            <p>Most active user category: ${getMostActiveCategory()}. Focus marketing efforts on this segment.</p>
          </div>
          <div class="insight-card">
            <h4>Platform Health</h4>
            <p>System shows healthy growth with balanced user distribution across all categories.</p>
          </div>
        </div>
      </div>
    `;
  };

  const generateUserAnalyticsReport = (currentDate: string, totalActiveUsers: number, engagementRate: number) => {
    return `
      <div class="header">
        <h1>MediConnect User Analytics Report</h1>
        <p><strong>Generated on:</strong> ${currentDate}</p>
        <p><strong>Report Type:</strong> User Analytics Focus</p>
      </div>
      
      <div class="section">
        <h2>User Overview</h2>
        <div class="highlight">
          <h3>Platform User Statistics</h3>
          <div class="stats-grid">
            <div class="stat-card">
              <div class="metric">${stats.total}</div>
              <div class="subtitle">Total Users</div>
            </div>
            <div class="stat-card">
              <div class="metric">${totalActiveUsers}</div>
              <div class="subtitle">Active Users</div>
            </div>
            <div class="stat-card">
              <div class="metric">${engagementRate}%</div>
              <div class="subtitle">Engagement Rate</div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="section">
        <h2>User Distribution Analysis</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <h3>Doctors</h3>
            <div class="metric">${stats.doctorCount || 0}</div>
            <p>Active: ${detailedStats?.activeUsers?.doctors || 0}</p>
          </div>
          <div class="stat-card">
            <h3>Medical Students</h3>
            <div class="metric">${stats.studentCount || 0}</div>
            <p>Active: ${detailedStats?.activeUsers?.students || 0}</p>
          </div>
          <div class="stat-card">
            <h3>Educational Institutes</h3>
            <div class="metric">${stats.instituteCount || 0}</div>
            <p>Active: ${detailedStats?.activeUsers?.institutes || 0}</p>
          </div>
          <div class="stat-card">
            <h3>Recruiters</h3>
            <div class="metric">${stats.recruiterCount || 0}</div>
            <p>Active: ${detailedStats?.activeUsers?.recruiters || 0}</p>
          </div>
        </div>
      </div>
      
      <div class="section">
        <h2>Recent User Registrations</h2>
        <table>
          <thead>
            <tr>
              <th>Email</th>
              <th>User Type</th>
              <th>Name</th>
              <th>Location</th>
              <th>Specialty/Field</th>
              <th>Institution</th>
              <th>Registration Date</th>
              <th>Last Active</th>
            </tr>
          </thead>
          <tbody>
            ${userData.slice(0, 20).map(user => `
              <tr>
                <td>${user.email}</td>
                <td>${formatUserType(user.userType)}</td>
                <td>${getUserName(user)}</td>
                <td>${user.location || 'N/A'}</td>
                <td>${getUserSpecialty(user)}</td>
                <td>${getUserInstitution(user)}</td>
                <td>${new Date(user.createdAt).toLocaleDateString()}</td>
                <td>${getLastActiveDate(user)}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  };

  const generateJobAnalyticsReport = (currentDate: string) => {
    return `
      <div class="header">
        <h1>MediConnect Job Analytics Report</h1>
        <p><strong>Generated on:</strong> ${currentDate}</p>
        <p><strong>Report Type:</strong> Job Market Analysis</p>
      </div>
      
      <div class="section">
        <h2>Job Market Overview</h2>
        <div class="highlight">
          <h3>Current Job Statistics</h3>
          <div class="stats-grid">
            <div class="stat-card">
              <div class="metric">${stats.totalJobs || 0}</div>
              <div class="subtitle">Total Job Opportunities</div>
            </div>
            <div class="stat-card">
              <div class="metric">${stats.fullTimeCount || 0}</div>
              <div class="subtitle">Full Time Positions</div>
            </div>
            <div class="stat-card">
              <div class="metric">${stats.partTimeCount || 0}</div>
              <div class="subtitle">Part Time Positions</div>
            </div>
            <div class="stat-card">
              <div class="metric">${stats.internCount || 0}</div>
              <div class="subtitle">Internship Opportunities</div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="section">
        <h2>Job Specialties Analysis</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <h3>Medical Specialties</h3>
            <p><strong>Cardiologists:</strong> ${stats.CardiologistCount || 0}</p>
            <p><strong>Pediatricians:</strong> ${stats.PediatricianCount || 0}</p>
            <p><strong>General Physicians:</strong> ${stats.GeneralPhysicianCount || 0}</p>
            <p><strong>Other Specialties:</strong> ${(stats.totalJobs || 0) - (stats.CardiologistCount || 0) - (stats.PediatricianCount || 0) - (stats.GeneralPhysicianCount || 0)}</p>
          </div>
        </div>
      </div>
      
      <div class="section">
        <h2>Recent Job Postings</h2>
        <table>
          <thead>
            <tr>
              <th>Job Title</th>
              <th>Department</th>
              <th>Location</th>
              <th>Job Type</th>
              <th>Hospital</th>
              <th>Salary Range</th>
              <th>Requirements</th>
              <th>Posted Date</th>
              <th>Urgency</th>
            </tr>
          </thead>
          <tbody>
            ${jobData.slice(0, 20).map(job => `
              <tr>
                <td>${job.title || 'N/A'}</td>
                <td>${job.department || 'N/A'}</td>
                <td>${job.location || 'N/A'}</td>
                <td>${formatJobType(job.jobType)}</td>
                <td>${job.hospitalName || 'N/A'}</td>
                <td>${formatSalaryRange(job.salaryRange)}</td>
                <td>${formatRequirements(job.requirements)}</td>
                <td>${new Date(job.createdAt).toLocaleDateString()}</td>
                <td>${job.urgent ? '<span style="color: #ef4444; font-weight: 600;">Urgent</span>' : '<span style="color: #6b7280;">Normal</span>'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
  };

  const generateExecutiveSummaryReport = (currentDate: string, totalActiveUsers: number, engagementRate: number) => {
    return `
      <div class="header">
        <h1>MediConnect Executive Summary</h1>
        <p><strong>Generated on:</strong> ${currentDate}</p>
        <p><strong>Report Type:</strong> Executive Summary</p>
      </div>
      
      <div class="section">
        <h2>Platform Performance Overview</h2>
        <div class="highlight">
          <h3>Key Metrics</h3>
          <div class="stats-grid">
            <div class="stat-card">
              <div class="metric">${stats.total}</div>
              <div class="subtitle">Total Users</div>
            </div>
            <div class="stat-card">
              <div class="metric">${stats.totalJobs || 0}</div>
              <div class="subtitle">Job Opportunities</div>
            </div>
            <div class="stat-card">
              <div class="metric">${engagementRate}%</div>
              <div class="subtitle">Engagement Rate</div>
            </div>
            <div class="stat-card">
              <div class="metric">${getMostActiveCategory()}</div>
              <div class="subtitle">Most Active Category</div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="section">
        <h2>Key Insights</h2>
        <div class="insights-grid">
          <div class="insight-card">
            <h4>User Growth</h4>
            <p>Platform has ${stats.total} registered users across all categories with healthy growth patterns.</p>
          </div>
          <div class="insight-card">
            <h4>Job Market</h4>
            <p>${stats.totalJobs || 0} job opportunities available with ${getMostPopularJobType()} being most in demand.</p>
          </div>
          <div class="insight-card">
            <h4>Engagement</h4>
            <p>${engagementRate}% user engagement rate indicates strong platform adoption and user retention.</p>
          </div>
          <div class="insight-card">
            <h4>Recommendations</h4>
            <p>Focus on ${getMostActiveCategory()} segment and expand ${getMostPopularJobType()} job opportunities.</p>
          </div>
        </div>
      </div>
    `;
  };

  const getMostActiveCategory = () => {
    const categories = [
      { name: 'Doctors', count: detailedStats?.activeUsers?.doctors || 0 },
      { name: 'Students', count: detailedStats?.activeUsers?.students || 0 },
      { name: 'Institutes', count: detailedStats?.activeUsers?.institutes || 0 },
      { name: 'Recruiters', count: detailedStats?.activeUsers?.recruiters || 0 }
    ];
    return categories.reduce((prev, current) => (prev.count > current.count) ? prev : current).name;
  };

  const getMostPopularJobType = () => {
    const jobTypes = [
      { name: 'Full Time', count: stats.fullTimeCount || 0 },
      { name: 'Part Time', count: stats.partTimeCount || 0 },
      { name: 'Internship', count: stats.internCount || 0 }
    ];
    return jobTypes.reduce((prev, current) => (prev.count > current.count) ? prev : current).name;
  };

  // Helper functions for formatting data
  const formatUserType = (userType: string) => {
    switch (userType) {
      case 'Doctor': return 'Doctor';
      case 'MedicalStudent': return 'Medical Student';
      case 'EducationalInstitute': return 'Educational Institute';
      case 'Recruiter': return 'Recruiter';
      default: return userType;
    }
  };

  const getUserName = (user: any) => {
    if (user.firstName && user.lastName) {
      return `${user.firstName} ${user.lastName}`;
    } else if (user.name) {
      return user.name;
    } else {
      return 'N/A';
    }
  };

  const getUserSpecialty = (user: any) => {
    if (user.specialty) return user.specialty;
    if (user.fieldOfStudy) return user.fieldOfStudy;
    if (user.profession) return user.profession;
    return 'N/A';
  };

  const getUserInstitution = (user: any) => {
    if (user.currentInstitute) return user.currentInstitute;
    if (user.institution) return user.institution;
    if (user.school) return user.school;
    return 'N/A';
  };

  const getLastActiveDate = (user: any) => {
    if (user.updatedAt) {
      return new Date(user.updatedAt).toLocaleDateString();
    }
    return 'N/A';
  };

  const formatJobType = (jobType: string) => {
    if (!jobType) return 'N/A';
    return jobType.charAt(0).toUpperCase() + jobType.slice(1).toLowerCase();
  };

  const formatSalaryRange = (salaryRange: string) => {
    if (!salaryRange) return 'N/A';
    return salaryRange;
  };

  const formatRequirements = (requirements: string) => {
    if (!requirements) return 'N/A';
    if (requirements.length > 50) {
      return requirements.substring(0, 50) + '...';
    }
    return requirements;
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-semibold">Generate Reports</h3>
          <p className="text-gray-600">Create comprehensive analytics reports</p>
        </div>
        <div className="flex items-center gap-2">
          <FileText className="w-5 h-5 text-blue-600" />
          <span className="text-sm text-gray-600">Report Generator</span>
        </div>
      </div>

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Report Type
          </label>
          <select
            value={reportType}
            onChange={(e) => setReportType(e.target.value)}
            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="comprehensive">Comprehensive Report</option>
            <option value="user-analytics">User Analytics Only</option>
            <option value="job-analytics">Job Analytics Only</option>
            <option value="executive-summary">Executive Summary</option>
          </select>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="flex items-center">
              <Users className="w-5 h-5 text-blue-600 mr-2" />
              <div>
                <p className="text-sm font-medium text-blue-900">Users</p>
                <p className="text-lg font-bold text-blue-600">{userData.length}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-green-50 p-4 rounded-lg">
            <div className="flex items-center">
              <Briefcase className="w-5 h-5 text-green-600 mr-2" />
              <div>
                <p className="text-sm font-medium text-green-900">Jobs</p>
                <p className="text-lg font-bold text-green-600">{jobData.length}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-purple-50 p-4 rounded-lg">
            <div className="flex items-center">
              <TrendingUp className="w-5 h-5 text-purple-600 mr-2" />
              <div>
                <p className="text-sm font-medium text-purple-900">Active Users</p>
                <p className="text-lg font-bold text-purple-600">
                  {(detailedStats?.activeUsers?.doctors || 0) +
                   (detailedStats?.activeUsers?.students || 0) +
                   (detailedStats?.activeUsers?.institutes || 0) +
                   (detailedStats?.activeUsers?.recruiters || 0)}
                </p>
              </div>
            </div>
          </div>
          
          <div className="bg-orange-50 p-4 rounded-lg">
            <div className="flex items-center">
              <Calendar className="w-5 h-5 text-orange-600 mr-2" />
              <div>
                <p className="text-sm font-medium text-orange-900">Date</p>
                <p className="text-lg font-bold text-orange-600">{new Date().toLocaleDateString()}</p>
              </div>
            </div>
          </div>
        </div>

        <button
          onClick={generatePDFReport}
          disabled={generating}
          className="w-full flex items-center justify-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {generating ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              Generating Report...
            </>
          ) : (
            <>
              <Download className="w-4 h-4" />
              Generate Report
            </>
          )}
        </button>

        <div className="text-xs text-gray-500 text-center">
          Report will include user analytics, job statistics, and key insights
        </div>
      </div>
    </div>
  );
};

export default ReportGenerator; 